# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: start_demo.proto

from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='start_demo.proto',
  package='harmonyServer',
  syntax='proto2',
  serialized_options=None,
  serialized_pb=b'\n\x10start_demo.proto\x12\rharmonyServer\"\x86\x01\n\x12StartDemoComponent\x12\x15\n\rexperiment_id\x18\x01 \x02(\t\x12\r\n\x05TITLE\x18\x02 \x02(\t\x12\x12\n\nMULTIPLIER\x18\x03 \x02(\x05\x12\r\n\x05\x43OUNT\x18\x04 \x02(\t\x12\x12\n\nFIRST_FILE\x18\x05 \x02(\t\x12\x13\n\x0bSECOND_FILE\x18\x06 \x02(\t'
)




_STARTDEMOCOMPONENT = _descriptor.Descriptor(
  name='StartDemoComponent',
  full_name='harmonyServer.StartDemoComponent',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='experiment_id', full_name='harmonyServer.StartDemoComponent.experiment_id', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='TITLE', full_name='harmonyServer.StartDemoComponent.TITLE', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='MULTIPLIER', full_name='harmonyServer.StartDemoComponent.MULTIPLIER', index=2,
      number=3, type=5, cpp_type=1, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='COUNT', full_name='harmonyServer.StartDemoComponent.COUNT', index=3,
      number=4, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='FIRST_FILE', full_name='harmonyServer.StartDemoComponent.FIRST_FILE', index=4,
      number=5, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='SECOND_FILE', full_name='harmonyServer.StartDemoComponent.SECOND_FILE', index=5,
      number=6, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=36,
  serialized_end=170,
)

DESCRIPTOR.message_types_by_name['StartDemoComponent'] = _STARTDEMOCOMPONENT
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

StartDemoComponent = _reflection.GeneratedProtocolMessageType('StartDemoComponent', (_message.Message,), {
  'DESCRIPTOR' : _STARTDEMOCOMPONENT,
  '__module__' : 'start_demo_pb2'
  # @@protoc_insertion_point(class_scope:harmonyServer.StartDemoComponent)
  })
_sym_db.RegisterMessage(StartDemoComponent)


# @@protoc_insertion_point(module_scope)
